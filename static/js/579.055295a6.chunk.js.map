{"version":3,"file":"static/js/579.055295a6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selector.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formName\":\"ContactForm_formName__9bHzl\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selector';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onAddNewContact = evt => {\n    evt.preventDefault();\n    contacts.some(contact => contact.name === name)\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(\n          addContact({\n            name,\n            number,\n            id: nanoid(),\n          })\n        );\n    setName('');\n    setNumber('');\n  };\n\n  const NameInputId = nanoid();\n  const NumberInputId = nanoid();\n\n  const handleChangeNumber = evt => {\n    setNumber(evt.currentTarget.value);\n  };\n  const handleChangeName = evt => {\n    setName(evt.currentTarget.value);\n  };\n\n  return (\n    <form className={css.form} onSubmit={onAddNewContact}>\n      <label className={css.formLabel} htmlFor={NameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Contact name\"\n          onChange={handleChangeName}\n          value={name}\n          id={NameInputId}\n          className={css.formName}\n        />\n      </label>\n      <label className={css.formLabel} htmlFor={NumberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Contact tel. number\"\n          onChange={handleChangeNumber}\n          value={number}\n          id={NumberInputId}\n          className={css.formNumber}\n        />\n      </label>\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactButton\":\"ContactList_contactButton__QiycO\",\"item\":\"ContactList_item__EZYHO\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from '../ContactList/ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selector';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst Contact = ({ name, number, id, onDelContact }) => {\n  return (\n    <li className={css.item}>\n      <span>\n        {name}: {number}\n      </span>\n      <button\n        className={css.contactButton}\n        type=\"button\"\n        onClick={() => {\n          onDelContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n};\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  const dispatch = useDispatch();\n  const onDelContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul>\n      {visibleContacts.map(contact => {\n        return (\n          <Contact\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n            onDelContact={onDelContact}\n            key={contact.id}\n          ></Contact>\n        );\n      })}\n    </ul>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterName\":\"Filter_filterName__Y2kKA\"};","import css from '../Filter/Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/Filter.slice';\nimport { getFilter } from 'redux/contacts/selector';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onQueryChanged = query => {\n    dispatch(setFilter(query));\n  };\n\n  return (\n    <label className={css.filterLabel}>\n      Find contacts by name\n      <input\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search contact\"\n        value={filter}\n        onChange={evt => onQueryChanged(evt.target.value)}\n      ></input>\n    </label>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { getError, getIsLoading } from 'redux/contacts/selector';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n        fontSize: 24,\n        color: '#010101',\n        textShadow: 'rgb(232, 216, 137) 1px 0 10px',\n        backgroundColor: 'rgba(0, 0, 255, 0.032)',\n      }}\n    >\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","NameInputId","NumberInputId","className","css","onSubmit","evt","preventDefault","some","contact","alert","addContact","htmlFor","type","pattern","title","required","placeholder","onChange","currentTarget","value","Contact","onDelContact","onClick","ContactList","visibleContacts","toLowerCase","includes","getVisibleContacts","deleteContact","map","Filter","query","target","setFilter","useEffect","fetchContacts","style","display","justifyContent","flexDirection","alignItems","fontSize","color","textShadow","backgroundColor"],"sourceRoot":""}